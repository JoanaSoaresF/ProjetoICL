PARSER_BEGIN(Parser0)

import AST.*;
import types.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.List;

public class
 Parser0 {

}

PARSER_END(Parser0)

SKIP :{
    " "
    | "\t"
    | "\r"
    |"\n"
}

TOKEN :{
    <NEW : "new">
    | <FUN : "fun">
    | <FUN_ARROW : "->">
    | <DOTS: ":">
    | <INT: "int">
    | <BOOL:"bool">
    | <REF : "ref">
    | <COMMA : ",">
    |  <ASSIGN : ":=">
    |  <DESREF : "!">
    |  <IF : "if">
    |  <THEN : "then">
    |  <ELSE : "else">
    |  <WHILE : "while">
    |  <DO : "do">
    |  <PRINT : "println">
    |  <TRUE : "true">
    |  <FALSE : "false">
    |  <AND : "&&">
    |  <OR: "||">
    |  <EQ : "==">
    |  <DIF : "~=">
    |  <GET : ">=">
    |  <LET : "<=">
    |  <GT : ">">
    |  <LT : "<">
    |  <NEG : "~">
    |  <DEF : "def">
    |  <IN : "in">
    |  <END : "end">
    |  <EQ_DEF : "=">
    |  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
    |  < Num: (["0"-"9"]) + >
    |  < PLUS : "+" >
    |  < MINUS : "-">
    |  < MUL : "*">
    |  < DIV : "/">
    |  < LPAR : "(" >
    |  < RPAR : ")" >
    |  < EL: ";;" >
    |  <SEQ: ";">
 }


ASTNode Start() :
{ ASTNode t1;}
{   t1 = Seq() <EL>
	{ return t1; }}


ASTNode Seq():
{ ASTNode t1, t2; }
{
   t1 = Assign() (<SEQ> t2=Assign() {t1 = new ASTSeq(t1, t2);})*
   { return t1;}
}

ASTNode Assign():
{ ASTNode t1, t2; }
{
   t1 = BoolAdd() (<ASSIGN> t2=BoolAdd() {t1 = new ASTAssign(t1, t2);})?
   { return t1;}
}

ASTNode BoolAdd() :
{ ASTNode t1, t2;
 Token tok;}
{ t1 = BoolMult() (tok = <OR>  t2 = BoolMult() {t1 = new ASTOr(t1, t2);})*
    {return t1;}
}

ASTNode BoolMult() :
{ ASTNode t1, t2;}
{    t1 = BoolRel() ("&&" t2 = BoolRel()
                            {t1 = new ASTAnd(t1, t2);}
                    )*
     {return t1;}
}


ASTNode BoolRel() :
{ ASTNode t1;
 ASTNode t2;
 Token t;}
{  t1 = Exp() ((t = <EQ> | t = <GET> | t = <GT> | t = <LET> | t = <LT> | t = <DIF>)t2 = Exp()
                {t1 = new ASTRelationOperands(t1,t.image, t2); }
                )?

  {return t1;}
}

ASTNode Exp() :
{ASTNode t1,t2;
Token tok;}
{     t1 = Term() (( tok=<PLUS> | tok=<MINUS> ) t2=Term()
                     {
                             if (tok.kind == PLUS){
                                 t1 = new ASTAdd(t1,t2);
                             }else{
                                 t1 = new ASTSub(t1,t2);
                             }
                     }
                   ) *
     { return t1; }
}

ASTNode Term() :
{ASTNode t1,t2;Token tok;}
{     t1=FunctionCall() ( ( tok = <MUL> | tok = <DIV> ) t2=FunctionCall()
                     { if (tok.kind == MUL)
                              t1 = new ASTMult(t1,t2);
                        else  t1 = new ASTDiv(t1,t2);   } ) *

   { return t1; }
}
ASTNode FunctionCall() :
{
  ASTNode t1, t2;
  List<ASTNode> args = new LinkedList<ASTNode>();
}
{
  t1=Fact()
    ( <LPAR> (t2=BoolAdd() { args.add(t2); }
      (<COMMA> t2=BoolAdd() { args.add(t2); })*
              )?
    <RPAR>
    { t1 = new ASTApply(args, t1); }
    )?
  { return t1; }
}

IType Type() :
{
  Token n;
  IType t;
  List<IType> parametersTypes = new LinkedList<IType>();
}
{
  (
    n=<INT>
    { t = new TypeInt(); }
  |
    n=<BOOL>
    { t = new TypeBool(); }
  |
    n=<REF> t=Type()
    { t = new TypeRef(t); }
  |
    <LPAR>
    (
      t=Type() { parametersTypes.add(t); }
      (
        <COMMA> t=Type() { parametersTypes.add(t); }
      )*
    )?
    <RPAR> t=Type()
    { t = new TypeClosure(parametersTypes, t); }
  )
  { return t; }
}

ASTNode Fact() :
{ ASTNode t1;
 ASTNode t2;
 ASTNode t3 = null;
 ASTNode e;
 Token tok;
 IType type;}
{   (tok=<Num> { t1 = new ASTNum(Integer.parseInt(tok.image)); }
   | tok = <Id> { t1 = new ASTId(tok.image);}
   | tok = <TRUE> { t1 = new ASTBoolean(true);}
   | tok = <FALSE> { t1 = new ASTBoolean(false);}
   | tok = <DESREF> t1 = Fact() {t1 = new ASTDeref(t1);}
   | <LPAR> t1=Seq() <RPAR>
   | <NEG> t1 = Fact()  { t1 = new ASTNegation(t1);}
   | tok = <MINUS> t1 =Fact() {t1 = new ASTUMinus(t1);}
   | tok = <DEF> { Token n;
                   Map<String, ASTNode> inits = new HashMap<String, ASTNode>();
                   Map<String, IType> typesDef = new HashMap<String, IType>();
                   ASTNode t;}
                (n=<Id> (<DOTS> type = Type() {typesDef.put(n.image, type);})?
                <EQ_DEF> e = BoolAdd() {inits.put(n.image, e);}
                )+
            <IN>
                t = Seq()
            <END> {t1 = new ASTDef(t, inits, typesDef);}
   | tok = <IF> t1 = BoolAdd() <THEN> t2 = Seq() (<ELSE> t3=Seq())? <END>
            {t1 =  new ASTIf(t1, t2, t3);}
   | tok = <WHILE> t1 = BoolAdd() <DO> t2=Seq() <END>
            {t1 =  new ASTWhile(t1, t2);}
   | tok = <PRINT> t1 = BoolRel()
             {t1 =  new ASTPrint(t1);}
   | tok = <NEW> t1 = Fact()
            {t1 =  new ASTNew(t1);}
   | tok = <FUN> { Token nFun;
                List<IType> types = new LinkedList<IType>();
                List<String> parametersNames = new LinkedList<String>();
                ASTNode tFun;}
                (
                    nFun = <Id> <DOTS> type = Type() {parametersNames.add(nFun.image);
                                                types.add(type);}
                    (<COMMA> nFun = <Id> <DOTS> type = Type() {parametersNames.add(nFun.image);
                                                    types.add(type);})*
                )?
                <FUN_ARROW> tFun = Seq() <END>
                {t1 = new ASTFun(parametersNames, types, tFun);}

   )
  { return t1; }  }